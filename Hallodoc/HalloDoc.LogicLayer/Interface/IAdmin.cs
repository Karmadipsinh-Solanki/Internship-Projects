using Hallodoc;
using HalloDoc.DataLayer.Models;
using HalloDoc.DataLayer.ViewModels.AdminViewModels;
using HalloDoc.Models;
using HalloDoc.ViewModels;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace HalloDoc.LogicLayer.Interface
{
    public interface IAdmin
    {
        public AdminDashboardTableView adminDashboard(string status, string? search, int? region, string? requestor, int page = 1, int pageSize = 10);
        public List<string> GetListOfRoleMenu(int? roleId);
        public int createRequest(CreateRequestViewModel model);
        public bool verifyState(string? region);
        public CreateRequestViewModel createRequest();
        public bool sendLink(AdminDashboardTableView model);
        public MemoryStream downloadExcel();
        public ViewCaseModel viewCase(int id);
        public bool viewCase(ViewCaseModel model);
        public bool viewCaseAssignModal(ViewCaseModel model);
        public ViewNotesViewModel viewNotes(int id);
        public bool viewNotes(ViewNotesViewModel model);
        public ViewUploadViewModel viewUpload(int id);
        public bool viewUpload(ViewUploadViewModel model);
        public bool closeCaseBtn(int requestId);
        public bool closeCaseSaveBtn(ViewUploadViewModel model);
        public ViewUploadViewModel closeCase(int id);
        public OrderViewModel SendOrder(int id);
        public bool SendOrder(OrderViewModel model);
        //public bool SendOrder(OrderViewModel model);
        public List<Region> fetchRegions();
        public List<Physician> fetchPhysicians(int id);
        public List<CaseTag> fetchTags();
        public List<HealthProfessional> fetchBusiness(int id);
        public HealthProfessional fetchBusinessDetail(int id);
        public bool assignCase(AdminDashboardTableView model);
        public bool transferCase(AdminDashboardTableView model);
        public bool cancelCase(AdminDashboardTableView model);
        public bool clearCase(AdminDashboardTableView model);
        public bool blockCase(AdminDashboardTableView model);
        public bool sendAgreement(AdminDashboardTableView model);
        public bool saveAdministratorDetail(AdminProfileViewModel model);
        public bool saveBillingInformation(AdminProfileViewModel model);
        public bool resetPassword(AdminProfileViewModel model);
        public AdminProfileViewModel adminProfile(int id = -1);
        public List<Region> fetchAdminRegions();
        public bool encounter(EncounterViewModel model);
        public EncounterViewModel encounter(int id);
        public bool mailDocument(List<int> requestFilesId, int requestId);
        public bool deleteViewUploadFile(string fileids, int id);
        public CreateAdminViewModel createAdmin();
        public bool createAdmin(CreateAdminViewModel model);

        public CreateAccessViewModel createAccess();
        public bool createAccess(CreateAccessViewModel model);
        public AccountAccessViewModel accountAccess();

        public ProviderViewModel providerInfo(int? region, int page = 1, int pageSize = 10);
        public bool deleteRecords(int id);
        public SearchRecordsViewModel searchRecords(string? patientName, string? providerName, string? email, string? phonenumber, int? selectedOptionValue, int? selectRequestType, DateTime? fromDate, DateTime? toDate, int page = 1, int pageSize = 10);
        public MemoryStream downloadSearchRecordsExcel(SearchRecordsViewModel model);
        public PatientRecordViewModel patientRecord(int id);
        public PatientHistoryViewModel patientHistory(string? firstname, string? lastname, string? email, string? phonenumber, int page = 1, int pageSize = 10);
        public BlockHistoryViewModel blockHistory(string? firstname, DateTime? date, string? email, string? phonenumber, int page = 1, int pageSize = 10);
        public bool unBlock(int id);
        public bool updateIsActive(int id, bool isActive);
        public EmailLogViewModel emailLog(string? receiverName, DateTime? date, DateTime? date2, string? email, string? role, int page = 1, int pageSize = 10);
        public SmsLogViewModel smsLog(string? receiverName, DateTime? date, DateTime? date2, string? phoneNumber, string? role, int page = 1, int pageSize = 10);
        public VendorViewModel vendorInformation(string? vendorName, int? professionType, int page = 1, int pageSize = 10);
        public bool deleteVendor(int id);
        public MemoryStream Export(AdminDashboardTableView model);
        public ProviderShift scheduling();
        public bool createShift(ProviderShift model);
        public ShiftDetail viewShift(int id);
        public List<ProviderInformationViewModel> GetProviderInformation(int Region);
        public List<ShiftDetail> GetScheduleData(int RegionId);
        public string GetPhyFromId(int id, int shiftId);
        public bool deleteShift(int id);
        public bool editShift(ProviderShift model);
        public ShiftReviewViewModel filterShiftDetail(int? region, int page = 1, int pageSize = 10);
        public bool returnShift(int id);
        public bool createPhysician(CreateProviderViewModel model);
        public CreateProviderViewModel createPhysician();
        public bool contactProvider(ProviderViewModel model);
        public bool deletePhysicianAccount(int id);
        public bool editPhysicianAccountInformation(CreateProviderViewModel model);
        public bool editPhysicianPassword(string password, int id);
        public bool editPhysicianInformation(CreateProviderViewModel model);
        public bool editPhysicianMailingInformation(CreateProviderViewModel model);
        public bool editPhysicianAccount(CreateProviderViewModel model);
        public CreateProviderViewModel editPhysicianAccount(int id);
        public bool editPhysicianProfile(CreateProviderViewModel model);
        public bool editPhysicianOnboarding(CreateProviderViewModel model);
        public EditAccessViewModel editAccess(int id);
        public bool editAccess(EditAccessViewModel model);
        public bool deleteAccess(int id);
        public UserAccessMainModel userAccess(int? accountType, int page = 1, int pageSize = 10);
        public AddBusinessViewModel addBusiness();
        public bool editBusiness(AddBusinessViewModel model);
        public AddBusinessViewModel editBusinessPage(int id);
        public bool addBusiness(AddBusinessViewModel model);
        public ProviderLocationViewModel providerLocation();
        public ProviderOnCallViewModel providerOnCall(int? region);
        public RequestClient getRequestData(int id);
    }
}
